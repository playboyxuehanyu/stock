#!/bin/bash

if [ $# -lt 0 ]; then
	echo "usage: $0 data"	
	exit
fi

#name=$1
#name=aapl6
name=aapl
#name=goog
#name=goog5

#data=${name}.dat
#data=$1
#prefix=${data%\.*}
#name=$prefix
script=${name}.R
png=${name}.png
emf=${name}.emf
eps=${name}.eps

if [[ $name == aapl* ]]; then
	# 5 years: 2008-2013
	#url="http://www.google.com/finance/historical?q=AAPL&startdate=Mar+1%2C+2008&enddate=Mar+1%2C+2013&output=csv"
	# 10 years: 2003-2013
	#url="http://www.google.com/finance/historical?q=AAPL&startdate=Mar+1%2C+2003&enddate=Mar+1%2C+2013&output=csv"
	# 33 years: 1980-2013 (actually 16 years of 1997-2013)
	#url="http://www.google.com/finance/historical?q=AAPL&startdate=Mar+1%2C+1980&enddate=Mar+1%2C+2013&output=csv"
	# AAPL 13 years: 2000-2013 (open value available)
	url="http://www.google.com/finance/historical?q=AAPL&startdate=Jan+1%2C+2000&enddate=Mar+1%2C+2013&output=csv"
elif [[ $name == goog* ]]; then
	# Google 9 years: 2004-2013
	url="http://www.google.com/finance/historical?q=GOOG&startdate=Aug+19%2C+2004&enddate=Mar+1%2C+2013&output=csv"
fi

#xlabel="DATE"
xlabel="DAY"
ylabel="STOCK VALUE ($)"
#ylabel="CLOSE VALUE"

colors=6

function genplot() {
	cmd="emf($emf)"

	if [ $1 == "png" ]; then
		figure=$png
		cmd="png('$figure')"
	elif [ $1 == "eps" ]; then
		figure=$eps
		cmd="postscript('$figure')"
	elif [ $1 == "emf" ]; then
		figure=$emf
		cmd="emf('$figure')"
	fi

cat >$script << EOF
library(ggplot2)

require(devEMF)
$cmd

data <- read.csv("$url ", sep=",", header=1)

# reverse data rows
$name = data[nrow(data):1, ]

print(names(data))
print(names(data)[c(2,5)])
#print($name[, c(2, 5)])
print(as.numeric($name[, 2]))
#print($name)

write.csv($name, file = "$name.csv")
write.table($name, file = "$name.tab")

#axis = (1, lab = aapl[2])
#axis = (2, aapl[2])
#box()

# open value
#plot(aapl[,1], aapl[,5], xlab = "TIME", ylab = "PRICE ($)", type = "l", col="blue")
#plot(as.numeric($name[,2]), xlab = "$xlabel", ylab = "$ylabel", lty = 1, col="blue")
#plot(data[,2], xlab = "$xlabel", ylab = "$ylabel", type = "l", col="blue")
plot($name[,5], xlab = "$xlabel", ylab = "$ylabel", type = "l", col="blue")
#plot(as.numeric($name[,2]), xlab = "$xlabel", ylab = "$ylabel", type = "l", col="blue")

# close value
#lines(as.numeric($name[,5]), col="red")
#lines($name[,5], col="red")
lines($name[,5], type = "l", col="red")
#lines($name[,3], type = "l", col="green")

#legend("topleft", names(data)[c(2,5)], fill = heat.colors(2))
#legend("topleft", names(data)[c(2,3,5)], lty = 1:3, col = c('blue', 'red', 'green'))
legend("topleft", names(data)[c(2,5)], lty = 1:2, col = c('blue', 'red'))
#legend("topleft", names(data)[c(2,5)], lty = 1, col = c('red', 'blue'))

#matplot(aapl[,1], aapl[,5], type = "l", col="red")
#plot(aapl[c(1:40), 1], aapl[c(1:40),5], xlab = "TIME", ylab = "PRICE ($)", type = "l", col="blue")
#plot(aapl[c(1:40),5], xlab = "TIME", ylab = "PRICE ($)", type = "l", col="blue")

# simple example
#x <- c(1,3,6,9,12)
#y <- c(1.5,2,7,8,15)
#plot(x,y, pch=15, col="blue")

# Example 2. Draw a plot, set a bunch of parameters.
#plot(x,y, xlab="x axis", ylab="y axis", main="my plot", ylim=c(0,20), xlim=c(0,20), pch=15, col="blue")
# fit a line to the points
#myline.fit <- lm(y ~ x)

# get information about the fit
#summary(myline.fit)

# draw the fit line on the plot
#abline(myline.fit)

# add some more points to the graph
#x2 <- c(0.5, 3, 5, 8, 12)
#y2 <- c(0.8, 1, 2, 4, 6)

#points(x2, y2, pch=16, col="green")

# header = TRUE ignores the first line, check.names = FALSE allows '+' in 'C++'
#benchmark <- read.table("$data", header = TRUE, row.names = "vwnd", check.names = FALSE)

# 't()' is matrix tranposition, 'beside = TRUE' separates the benchmarks, 'heat' provides nice colors
#barplot(t(as.matrix(benchmark)), beside = TRUE, col = heat.colors($colors))
#barplot(t(as.matrix(benchmark)), beside = TRUE, col = heat.colors($colors), xlab = "$xlabel", ylab = "$ylabel")

# 'cex' stands for 'character expansion', 'bty' for 'box type' (we don't want borders)
#legend("topright", names(benchmark), cex = 0.9, bty = "n", fill = heat.colors($colors))

EOF

	R CMD BATCH $script
}

genplot png

genplot eps

genplot emf

git add .
git commit -a -m $script
git push

